<?php

/**
 * ProcessWire Fieldtype that runs a Pages->find() against a predefined query.
 *
 * Note that this is a runtime-only field and can't be queried via selectors since its value
 * only exists at runtime.
 *
 * This fieldtype extends FieldtypeText, but does not support  TextFormatters.
 * Because this is a predefined query, set at field creation, there is no
 * input at Page creation.
 *
 * This was created by modifying FieldtypeConcat (http://modules.processwire.com/modules/fieldtype-concat/)
 *
 * ProcessWire 2.x
 * Copyright (C) 2012 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://processwire.com
 *
 */

class FieldtypePagesSelectorQuery extends FieldtypeText {

  public static function getModuleInfo() {
		return array(
			'title' => 'PagesSelectorQuery',
			'version' => 101,
			'summary' => 'Runs a predefined Pages->find(query) as a field value',
			'author' => 'Adam Levine',
			);
	}

	public function init() {
		$this->allowTextFormatters(false);
		$this->set('queryField', '');

	}

	/**
	 * Return the fields required to configure an instance of FieldtypeText
	 *
	 */
	public function ___getConfigInputfields(Field $field) {
		$inputfields = parent::___getConfigInputfields($field);

		$input = wire('modules')->get('InputfieldText');
		$input->attr('name', 'queryField');
		$input->attr('value', $field->queryField);
		$input->label = $this->_('Selector query string');
		$input->description = $this->_('Enter the comma-delimited selector query.  $variables will be replaced if they exist at evaluation scope. Example entry:  template=my_template,select_page_field=$page'); // Description
		$notes = $this->_('This returns a PageArray.   $page and $field are available for substitution. ');
		$input->notes=$notes;
		$inputfields->add($input);

		return $inputfields;
	}

	/**
	 * Create the populated concat string for the given $field on $page
	 *
	 * @return str Non-formatted concat string
	 *
	 */
	protected function runSelectorQuery(Page $page, Field $field) {



		$str = $field->queryField;

		// replace variables in the string with values
		$vars = '/(?<=\$)[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/';
		preg_match_all($vars, $str, $replace);
		foreach($replace[0] as $r){
			$str = str_replace('$'.$r, $$r, $str);
		}

		return  wire('pages')->find($str);

	}


	/**

	 * Format value for output: Leave as is, as this returns a PageArray

	 *

	 */

	public function ___formatValue(Page $page, Field $field, $value) {



		return $value;

	}
	/**
	 * The following functions are defined as replacements to keep this fieldtype out of the DB
	 *
	 */

	public function sanitizeValue(Page $page, Field $field, $value) {
		return $value;
	}

	public function getInputfield(Page $page, Field $field) {
		// no inputfield necessary
		return null;
	}

	public function ___wakeupValue(Page $page, Field $field, $value) {
		return $this->runSelectorQuery($page, $field);
	}

	public function ___sleepValue(Page $page, Field $field, $value) {
		return $this->runSelectorQuery($page, $field);
	}

	public function getLoadQuery(Field $field, DatabaseQuerySelect $query) {
		// prevent loading from DB
		return $query;
	}

	public function ___loadPageField(Page $page, Field $field) {
		// generate value at runtime rather than loading from DB
		return $this->runSelectorQuery($page, $field);
	}

	public function ___savePageField(Page $page, Field $field) {
		// prevent saving of field
		return true;
	}

	public function ___deletePageField(Page $page, Field $field) {
		// deleting of page field not necessary
		return true;
	}

	public function ___deleteField(Field $field) {
		// deleting of field not necessary
		return true;
	}

	public function getDatabaseSchema(Field $field) {
		// no database schema necessary
		return array();
	}

	public function ___createField(Field $field) {
		// nothing necessary to create the field
		return true;
	}

	public function getMatchQuery($query, $table, $subfield, $operator, $value) {
		// we don't allow this field to be queried
		throw new WireException("Field '{$query->field->name}' is runtime and not queryable");
	}

	public function ___getCompatibleFieldtypes(Field $field) {
		// no fieldtypes are compatible
		return new Fieldtypes();
	}

	public function getLoadQueryAutojoin(Field $field, DatabaseQuerySelect $query) {
		// we don't allow this field to be autojoined
		return null;
	}


}

